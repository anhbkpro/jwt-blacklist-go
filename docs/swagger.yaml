basePath: /api
definitions:
  handlers.ErrorResponse:
    properties:
      message:
        example: Invalid credentials
        type: string
    type: object
  handlers.LoginRequest:
    properties:
      password:
        example: admin123
        type: string
      username:
        example: admin
        type: string
    type: object
  handlers.TokenResponse:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      expires_in:
        example: 900
        type: integer
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      token_type:
        example: Bearer
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@yourcompany.com
    name: API Support
    url: http://www.yourcompany.com/support
  description: API for JWT authentication with token blacklisting
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: JWT Blacklisting API
  version: "1.0"
paths:
  /admin/dashboard:
    get:
      description: Access an admin-only resource
      produces:
      - application/json
      responses:
        "200":
          description: Admin resource
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get admin resource
      tags:
      - admin
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and get JWT tokens
      parameters:
      - description: Login request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successful login
          schema:
            $ref: '#/definitions/handlers.TokenResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Login to the system
      tags:
      - auth
  /auth/logout:
    post:
      description: Revoke the current token
      responses:
        "200":
          description: Successfully logged out
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Logout from the system
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Get a new access token using a refresh token
      produces:
      - application/json
      responses:
        "200":
          description: New access token
          schema:
            $ref: '#/definitions/handlers.TokenResponse'
        "401":
          description: Invalid refresh token
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Refresh access token
      tags:
      - auth
  /protected:
    get:
      description: Access a protected resource requiring authentication
      produces:
      - application/json
      responses:
        "200":
          description: Protected resource
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get protected resource
      tags:
      - protected
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and the JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
